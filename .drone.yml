# Simple pipeline to accomodate feature branches being merged in master, generating a golden image
# that is later promoted by tagging accordingly. Example:
#
# - staging: reg.dev.idiotz.nl/stg-api:0.1.2
# - stg: reg.dev.idiotz.nl/api:stg-0.1.2
# - prod: reg.dev.idiotz.nl/api:0.1.2
#
# the pipeline first builds the Dockerfile's ci stage and caches that for parallel test runs
# afterwards it continues building it into final artifact from the cached ci build.

kind: pipeline
name: default

steps:
  - name: build-ci
    image: plugins/docker
      registry: reg.dev.idiotz.nl
      repo: reg.dev.idiotz.nl/api
      username: drone
      password: blabla
      target: ci
      tags:
        - ${DRONE_BRANCH}-ci
      cache_from:
        - reg.dev.idiotz.nl/api:master
        - reg.dev.idiotz.nl/api:${DRONE_BRANCH}
    when:
      event:
        - push

  - name: ci-lint
    group: ci
    image: reg.dev.idiotz.nl/api:${DRONE_BRANCH}-ci
    commands:
      - npm run lint

  - name: ci-test
    group: ci
    image: reg.dev.idiotz.nl/api:${DRONE_BRANCH}-ci
    commands:
      - npm test


  - name: build-final
    image: plugins/docker
    settings:
      registry: reg.dev.idiotz.nl
      repo: reg.dev.idiotz.nl/api
      username: drone
      password: blabla
      tags:
        - ${DRONE_BRANCH}
        - ${DRONE_BRANCH}-${DRONE_COMMIT}
      cache_from:
        - reg.dev.idiotz.nl/api:${DRONE_BRANCH}-ci

  - name: slack
    image: plugins/slack
    settings:
      webhook: https://hooks.slack.com/services/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
      channel: drone-build
      username: Drone
    when:
      status:
        - success
        - failure