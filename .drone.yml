# We assume GitHub flow is used, and we simply deploy all feature branches to production.
# Feature flags are built into the software so we don't deal with it in our CD setup.
# If an error occurred kubernetes rolls back automatically.
# The feature is later merged in branch master when the feature behaves ok.
#
# @see https://blogs.technet.microsoft.com/devops/2016/06/21/a-git-workflow-for-continuous-delivery/
# @see http://blog.launchdarkly.com/is-it-a-feature-flag-or-a-feature-toggle/

kind: pipeline
name: default

steps:
- name: restore_cache
  image: drillster/drone-volume-cache:latest
  settings:
    restore: true
    mount:
      - ./node_modules
    volumes:
      - /tmp/cache:/cache    # everything in this folder is inflated here and cached later:
- name: test
  image: node:11.14
  commands:
    - npm install
    - npm test
  when:
    branch:
      exclude: [ master ]

- name: build:
  image: docker
  volumes:
  - name: docker
    path: /var/run/docker.sock
  commands:
    - |
      IMG=$${REGISTRY}/api
      echo building image $${IMG}
      docker build --rm -t $${IMG} .
      docker tag $${IMG} $${IMG}:dev-${DRONE_COMMIT_SHA}
      docker push $${IMG}:dev-${DRONE_COMMIT_SHA}
      docker tag $${IMG} $${IMG}:latest
      docker push $${IMG}:latest
  secrets: [registry]

- name: rebuild_cache:
  image: drillster/drone-volume-cache:latest
  settings:
  rebuild: true
    mount:
      - ./node_modules
    volumes:
      - /tmp/cache:/cache    # everything in this folder is inflated here and cached later:

- name: slack:
  image: plugins/slack
  settings:
    webhook: https://hooks.slack.com/services/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
    channel: drone-build
    username: Drone
  when:
    status: [ success, failure ]

volumes:
- name: docker
  host:
    path: /var/run/docker.sock
